@// import used views
@import org.skycrawl.search.core.templating.views.search.*

@// declare template arguments
@args SearchView view, String pageTitle

@// this layout extends the main layout
@extends(components.layout, pageTitle, "css/search.css")

@*
	Body of this template. Only values from "view" (constructed from servlet parameters) need to be escaped.
*@
@// first some information
<h2>Useful information &amp; links:</h2>
<ul>
	<li>Escaping is disabled by default. You can enable it in the <a href="./settings">settings</a>.
	<li>Examples of malicious search payloads can be found <a href="./payloads">here</a>.
</ul>

<h2>Search:</h2>
<datalist id="search-colors">
   	<option value="red">Color - red</option>
   	<option value="black">Color - black</option>
   	<option value="blue">Color - blue</option>
   	<option value="white">Color - white</option>
   	<option value="green">Color - green</option>
   	<option value="yellow">Color - yellow</option>
</datalist>

@// include the main search form or GUI
@render("searchForm")

@// include a field with escaped search term
<h2>When escaped (<a href="https://github.com/chrisisbeef/jquery-encoder">JQuery Encoder</a>):</h2>
@if(view.getSearchTerm())
{
	<input id="search-field-escaped" type="search" value="@_forceEscapeAsAttr(view.getSearchTerm())" readonly />
}
else
{
	<input id="search-field-escaped" type="search" readonly />
}

@// bind the above form and field
<script type="text/javascript">
	var escapeField = $("#search-field-escaped");
	
	// escape escapeField's value after the page is loaded
	escapeField.ready(setEscapedFieldValue(escapeField.val()));
	
	// bind '#search-field' with '#search-field-escaped'
	$("#search-field").on("input", setEscapedFieldValue($(this).val()));
	
	function setEscapedFieldValue(value)
	{
		escapeField.removeAttr("readonly");
		// exercise for you: why is there no need JS encode the following?
		escapeField.val($.encoder.encodeForHTMLAttribute(undefined, value, true));
		escapeField.attr("readonly", "true");
	}
</script>

@// render layout
@render() @// or doLayout()
